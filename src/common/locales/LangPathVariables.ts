import { Translation } from '@/common/locales/types/TranslationType'

const langPathVariables: Translation = {
  cardsPage: {
    addNewCard: 'cardsPage.addNewCard',
    backDeckList: 'cardsPage.backDeckList',
    delete: 'cardsPage.delete',
    deleteCard: 'cardsPage.deleteCard',
    deleteDeck: 'cardsPage.deleteDeck',
    edit: 'cardsPage.edit',
    emptyDeck: 'cardsPage.emptyDeck',
    isDeleteCard: 'cardsPage.isDeleteCard',
    isDeleteDeck: 'cardsPage.isDeleteDeck',
    learn: 'cardsPage.learn',
    learnCards: 'cardsPage.learnCards',
    noResultsFound: 'cardsPage.noResultsFound',
    unfortunatelyEmptyDeck: 'cardsPage.unfortunatelyEmptyDeck',
  },
  checkEmail: {
    backToSignIn: 'checkEmail.backToSignIn',
    checkEmail: 'checkEmail.checkEmail',
    instruction: 'checkEmail.instruction',
  },
  controlButtons: {
    back: 'controlButtons.back',
    close: 'controlButtons.close',
    last: 'controlButtons.last',
    next: 'controlButtons.next',
    open: 'controlButtons.open',
    skip: 'controlButtons.skip',
  },
  dataFiller: {
    changeCover: 'dataFiller.changeCover',
    removeCover: 'dataFiller.removeCover',
    uploadImage: 'dataFiller.uploadImage',
  },
  decksPage: {
    addNewDeck: 'decksPage.addNewDeck',
    clearFilter: 'decksPage.clearFilter',
    decksList: 'decksPage.decksList',
    deleteDeck: 'decksPage.deleteDeck',
    isDeleteDeck: 'decksPage.isDeleteDeck',
    numberOfCards: 'decksPage.numberOfCards',
    showDecksCards: 'decksPage.showDecksCards',
  },
  deleteModal: {
    cancel: 'deleteModal.cancel',
  },
  failedApiResponse: {
    network: 'failedApiResponse.network',
    unknown: 'failedApiResponse.unknown',
  },
  forgotPassword: {
    email: 'forgotPassword.email',
    enterYourEmail: 'forgotPassword.enterYourEmail',
    forgotPassword: 'forgotPassword.forgotPassword',
    rememberPassword: 'forgotPassword.rememberPassword',
    sendInstructions: 'forgotPassword.sendInstructions',
    tryLogIn: 'forgotPassword.tryLogIn',
  },
  header: {
    myProfile: 'header.myProfile',
    signIn: 'header.signIn',
    signOut: 'header.signOut',
  },
  help: {
    help: 'help.help',
    'step-add-new-deck': 'help.step-add-new-deck',
    'step-change-theme': 'help.step-change-theme',
    'step-clear-filter': 'help.step-clear-filter',
    'step-edit-table-deck-btns': 'help.step-edit-table-deck-btns',
    'step-go-home': 'help.step-go-home',
    'step-pagination': 'help.step-pagination',
    'step-private-deck': 'help.step-private-deck',
    'step-profile-drop-down': 'help.step-profile-drop-down',
    'step-search': 'help.step-search',
    'step-select-language': 'help.step-select-language',
    'step-slider-filter': 'help.step-slider-filter',
    'step-tab-filter': 'help.step-tab-filter',
    'step-this-is-table': 'help.step-this-is-table',
  },
  learnPage: {
    aLotThought: 'learnPage.aLotThought',
    answer: 'learnPage.answer',
    backCardsPage: 'learnPage.backCardsPage',
    confused: 'learnPage.confused',
    countAttempts: 'learnPage.countAttempts',
    didtKnow: 'learnPage.didtKnow',
    forgot: 'learnPage.forgot',
    knewAnswer: 'learnPage.knewAnswer',
    learn: 'learnPage.learn',
    nextQuestion: 'learnPage.nextQuestion',
    question: 'learnPage.question',
    rateYourself: 'learnPage.rateYourself',
    showAnswer: 'learnPage.showAnswer',
  },
  localeSwitcher: {
    currentLanguage: 'localeSwitcher.currentLanguage',
    languages: {
      by: 'localeSwitcher.languages.by',
      en: 'localeSwitcher.languages.en',
      kz: 'localeSwitcher.languages.kz',
      ru: 'localeSwitcher.languages.ru',
      ua: 'localeSwitcher.languages.ua',
    },
    ownLanguages: {
      by: 'localeSwitcher.ownLanguages.by',
      en: 'localeSwitcher.ownLanguages.en',
      kz: 'localeSwitcher.ownLanguages.kz',
      ru: 'localeSwitcher.ownLanguages.ru',
      ua: 'localeSwitcher.ownLanguages.ua',
    },
  },
  modalAddEditCard: {
    addNewCard: 'modalAddEditCard.addNewCard',
    answer: 'modalAddEditCard.answer',
    cancel: 'modalAddEditCard.cancel',
    createCard: 'modalAddEditCard.createCard',
    question: 'modalAddEditCard.question',
    removeCover: 'modalAddEditCard.removeCover',
    saveChanges: 'modalAddEditCard.saveChanges',
    updateCard: 'modalAddEditCard.updateCard',
  },
  modalAddEditDeck: {
    addNewDeck: 'modalAddEditDeck.addNewDeck',
    cancel: 'modalAddEditDeck.cancel',
    changeCover: 'modalAddEditDeck.changeCover',
    createPack: 'modalAddEditDeck.createPack',
    editTitle: 'modalAddEditDeck.editTitle',
    nameDeck: 'modalAddEditDeck.nameDeck',
    private: 'modalAddEditDeck.private',
    removeCover: 'modalAddEditDeck.removeCover',
    saveChanges: 'modalAddEditDeck.saveChanges',
    updateDeck: 'modalAddEditDeck.updateDeck',
    uploadImage: 'modalAddEditDeck.uploadImage',
  },
  modalOnEmpty: {
    areYouSure: 'modalOnEmpty.areYouSure',
    no: 'modalOnEmpty.no',
    reallyWant: 'modalOnEmpty.reallyWant',
    yes: 'modalOnEmpty.yes',
  },
  paginationWithSelect: {
    onPage: 'paginationWithSelect.onPage',
    show: 'paginationWithSelect.show',
  },
  profilePage: {
    backDeckList: 'profilePage.backDeckList',
    logout: 'profilePage.logout',
    nickname: 'profilePage.nickname',
    personalInfo: 'profilePage.personalInfo',
    saveChanges: 'profilePage.saveChanges',
    signUp: 'profilePage.signUp',
  },
  signInPage: {
    dontHaveAccount: 'signInPage.dontHaveAccount',
    email: 'signInPage.email',
    forgotPassword: 'signInPage.forgotPassword',
    password: 'signInPage.password',
    rememberMe: 'signInPage.rememberMe',
    signIn: 'signInPage.signIn',
    signUp: 'signInPage.signUp',
  },
  signUp: {
    confirmPassword: 'signUp.confirmPassword',
    email: 'signUp.email',
    haveAccount: 'signUp.haveAccount',
    password: 'signUp.password',
    signIn: 'signUp.signIn',
    signUp: 'signUp.signUp',
    submit: 'signUp.submit',
  },
  successApiResponse: {
    commonInfo: {
      clearFilters: 'successApiResponse.commonInfo.clearFilters',
      equal: {
        common: 'successApiResponse.commonInfo.equal.common',
        deckImg: 'successApiResponse.commonInfo.equal.deckImg',
        deckName: 'successApiResponse.commonInfo.equal.deckName',
        success: 'successApiResponse.commonInfo.equal.success',
      },
      nothingLearn: 'successApiResponse.commonInfo.nothingLearn',
      setGrade: 'successApiResponse.commonInfo.setGrade',
    },
    creation: {
      card: 'successApiResponse.creation.card',
      deck: 'successApiResponse.creation.deck',
    },
    deleteFavorites: 'successApiResponse.deleteFavorites',
    deleted: 'successApiResponse.deleted',
    deletion: {
      card: 'successApiResponse.deletion.card',
      deck: 'successApiResponse.deletion.deck',
    },
    favorites: 'successApiResponse.favorites',
    logOut: 'successApiResponse.logOut',
    loggedIn: 'successApiResponse.loggedIn',
    registrationSuccessful: 'successApiResponse.registrationSuccessful',
    update: {
      card: 'successApiResponse.update.card',
      deck: 'successApiResponse.update.deck',
      profile: 'successApiResponse.update.profile',
    },
  },
  tableComponentWithTypes: {
    answer: 'tableComponentWithTypes.answer',
    cards: 'tableComponentWithTypes.cards',
    createdBy: 'tableComponentWithTypes.createdBy',
    grade: 'tableComponentWithTypes.grade',
    lastUpdated: 'tableComponentWithTypes.lastUpdated',
    name: 'tableComponentWithTypes.name',
    noContent: 'tableComponentWithTypes.noContent',
    noResultsFound: 'tableComponentWithTypes.noResultsFound',
    pleaseAddAnyData: 'tableComponentWithTypes.pleaseAddAnyData',
    question: 'tableComponentWithTypes.question',
    unknownCondition: 'tableComponentWithTypes.unknownCondition',
  },
  useTabsValuesParams: {
    allDecks: 'useTabsValuesParams.allDecks',
    favorites: 'useTabsValuesParams.favorites',
    myDecks: 'useTabsValuesParams.myDecks',
  },
} as const

export default langPathVariables
